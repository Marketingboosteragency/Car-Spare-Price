# webapp.py - Auto Parts Finder - EXCLUSIVO REPUESTOS DE AUTOS (USA)
from flask import Flask, request, jsonify, session, redirect, url_for, render_template_string, flash
import requests
import os
import re
import html
import time
import io
from datetime import datetime
from urllib.parse import urlparse, quote_plus
from functools import wraps

# Imports para b√∫squeda por imagen (opcionales)
try:
    from PIL import Image
    PIL_AVAILABLE = True
    print("‚úÖ PIL (Pillow) disponible para procesamiento de imagen")
except ImportError:
    PIL_AVAILABLE = False
    print("‚ö†Ô∏è PIL (Pillow) no disponible - b√∫squeda por imagen limitada")

try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
    print("‚úÖ Google Generative AI (Gemini) disponible")
except ImportError:
    genai = None
    GEMINI_AVAILABLE = False
    print("‚ö†Ô∏è Google Generative AI no disponible - instalar con: pip install google-generativeai")

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'fallback-key-change-in-production')
app.config['PERMANENT_SESSION_LIFETIME'] = 1800
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SECURE'] = True if os.environ.get('RENDER') else False
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max

# --- CONFIGURACI√ìN DE APIs ---
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
if GEMINI_AVAILABLE and GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        print("‚úÖ API de Google Gemini configurada correctamente")
        GEMINI_READY = True
    except Exception as e:
        print(f"‚ùå Error configurando Gemini: {e}")
        GEMINI_READY = False
else:
    GEMINI_READY = False
    print("‚ö†Ô∏è Gemini no disponible o sin API Key. B√∫squeda por imagen desactivada.")

# =============================================================================
# VALIDACI√ìN DE RELEVANCIA DE B√öSQUEDA
# =============================================================================
AUTO_PART_KEYWORDS = {
    # Espa√±ol
    'repuesto', 'parte', 'pieza', 'freno', 'pastilla', 'disco', 'motor', 'filtro', 'aceite',
    'aire', 'bujia', 'bobina', 'alternador', 'arranque', 'bateria', 'suspension', 'amortiguador',
    'faro', 'luz', 'calavera', 'stop', 'parachoque', 'defensa', 'espejo', 'radiador', 'bomba', 'agua', 'gasolina',
    'llanta', 'rin', 'rueda', 'sensor', 'inyector', 'correa', 'banda', 'cadena', 'tiempo', 'escape',
    'silenciador', 'catalizador', 'balero', 'rodamiento', 'eje', 'homocinetica', 'transmision',
    'embrague', 'clutch', 'termostato', 'valvula', 'marcha', 'maf', 'map', 'oxigeno',
    # Ingl√©s
    'part', 'replacement', 'brake', 'pad', 'rotor', 'caliper', 'engine', 'filter', 'oil',
    'air', 'spark', 'plug', 'coil', 'ignition', 'alternator', 'starter', 'battery', 'suspension',
    'shock', 'strut', 'absorber', 'headlight', 'taillight', 'light', 'bulb', 'bumper', 'mirror',
    'radiator', 'pump', 'water', 'fuel', 'tire', 'rim', 'wheel', 'sensor', 'injector', 'belt',
    'chain', 'timing', 'exhaust', 'muffler', 'converter', 'bearing', 'axle', 'cv-joint',
    'transmission', 'clutch', 'thermostat', 'gasket', 'valve', 'maf', 'map', 'oxygen'
}

# =============================================================================
# BASE DE DATOS INTERNA DE AUTOPARTES Y MARCAS
# =============================================================================
CAR_BRAND_EQUIVALENTS = {
    'ford': {'oem_sites': ['parts.ford.com', 'tascaparts.com'], 'compatible_brands': ['lincoln', 'mercury']},
    'chevrolet': {'oem_sites': ['gmpartsdirect.com', 'gmpartsgiant.com'], 'compatible_brands': ['gmc', 'cadillac', 'buick']},
    'toyota': {'oem_sites': ['parts.toyota.com', 'toyotapartsdeal.com'], 'compatible_brands': ['lexus', 'scion']},
    'honda': {'oem_sites': ['hondapartsnow.com', 'bernardiparts.com'], 'compatible_brands': ['acura']},
    'nissan': {'oem_sites': ['nissanpartsdeal.com', 'nissanpartsplus.com'], 'compatible_brands': ['infiniti']},
    'bmw': {'oem_sites': ['getbmwparts.com', 'bimmerworld.com', 'fcpeuro.com'], 'compatible_brands': ['mini']},
    'gmc': {'oem_sites': ['gmpartsdirect.com', 'gmpartsgiant.com'], 'compatible_brands': ['chevrolet']},
    'dodge': {'oem_sites': ['mopar.com', 'allmoparparts.com'], 'compatible_brands': ['chrysler', 'jeep', 'ram']},
    'jeep': {'oem_sites': ['mopar.com', 'allmoparparts.com'], 'compatible_brands': ['dodge', 'chrysler']},
    'ram': {'oem_sites': ['mopar.com', 'allmoparparts.com'], 'compatible_brands': ['dodge', 'chrysler']},
    'chrysler': {'oem_sites': ['mopar.com', 'allmoparparts.com'], 'compatible_brands': ['dodge', 'jeep']},
    'volkswagen': {'oem_sites': ['parts.vw.com', 'vwpartsvortex.com'], 'compatible_brands': ['audi']},
    'audi': {'oem_sites': ['parts.audiusa.com', 'audipartsstore.com'], 'compatible_brands': ['volkswagen']},
}

# Lista combinada de todas las marcas para validaci√≥n r√°pida
ALL_CAR_BRANDS = set(CAR_BRAND_EQUIVALENTS.keys())

# --- Clases de Autenticaci√≥n y Helpers (sin cambios mayores) ---
class FirebaseAuth:
    # ... (El c√≥digo de esta clase no cambia) ...
    def __init__(self):
        self.firebase_web_api_key = os.environ.get("FIREBASE_WEB_API_KEY")
        if not self.firebase_web_api_key:
            print("WARNING: FIREBASE_WEB_API_KEY no configurada")
        else:
            print("SUCCESS: Firebase Auth configurado")
    
    def login_user(self, email, password):
        if not self.firebase_web_api_key:
            return {'success': False, 'message': 'Servicio no configurado'}
        url = f"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={self.firebase_web_api_key}"
        payload = {'email': email, 'password': password, 'returnSecureToken': True}
        try:
            response = requests.post(url, json=payload, timeout=8)
            response.raise_for_status()
            user_data = response.json()
            return {'success': True, 'message': 'Bienvenido!', 'user_data': user_data}
        except requests.exceptions.HTTPError as e:
            return {'success': False, 'message': 'Correo o contrase√±a incorrectos'}
        except Exception as e:
            return {'success': False, 'message': 'Error de conexi√≥n'}

    def set_user_session(self, user_data):
        session['user_id'] = user_data['localId']
        session['user_name'] = user_data.get('displayName', user_data['email'].split('@')[0])
        session['user_email'] = user_data['email']
        session['id_token'] = user_data['idToken']
        session.permanent = True
    
    def clear_user_session(self):
        session.clear()
    
    def is_user_logged_in(self):
        return 'user_id' in session

    def get_current_user(self):
        if not self.is_user_logged_in(): return None
        return {'user_name': session.get('user_name')}

firebase_auth = FirebaseAuth()

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not firebase_auth.is_user_logged_in():
            flash('Tu sesi√≥n ha expirado. Inicia sesi√≥n nuevamente.', 'warning')
            return redirect(url_for('auth_login_page'))
        return f(*args, **kwargs)
    return decorated_function

# ==============================================================================
# L√ìGICA DE B√öSQUEDA DE AUTOPARTES ESPECIALIZADA
# ==============================================================================

class AutoPartsFinder:
    def __init__(self):
        self.serpapi_key = os.environ.get('SERPAPI_KEY')
        if self.serpapi_key:
            print(f"‚úÖ SerpAPI configurado para autopartes (key: ...{self.serpapi_key[-4:]})")
        else:
            print("‚ö†Ô∏è SerpAPI no configurado. Se usar√°n resultados de ejemplo.")
    
    def is_valid_auto_part_query(self, query):
        """Verifica si la consulta parece ser para un repuesto de auto."""
        query_lower = " " + query.lower() + " "
        
        # 1. Buscar una palabra clave de repuestos
        if any(f" {keyword} " in query_lower for keyword in AUTO_PART_KEYWORDS):
            return True
            
        # 2. Buscar una marca de auto
        if any(f" {brand} " in query_lower for brand in ALL_CAR_BRANDS):
            return True

        # 3. Buscar un a√±o (4 d√≠gitos entre 1960 y 2030)
        if re.search(r'\b(19[6-9]\d|20[0-2]\d|2030)\b', query_lower):
            return True

        print(f"üïµÔ∏è B√∫squeda rechazada: '{query}' no parece ser un repuesto de auto.")
        return False

    def search_parts(self, text_query, target_brand=None):
        """Busca repuestos, con validaci√≥n de relevancia primero."""
        
        # PASO 1: VALIDAR RELEVANCIA
        if not self.is_valid_auto_part_query(text_query):
            return "INVALID_QUERY"

        # Si la validaci√≥n pasa, contin√∫a con la l√≥gica de b√∫squeda...
        # ... (resto del m√©todo search_parts sin cambios)
        print(f"üöÄ Iniciando b√∫squeda para: '{text_query}'")
        # Aqu√≠ ir√≠a el resto de la l√≥gica de b√∫squeda que ya ten√≠as
        # Por simplicidad para el ejemplo, devolvemos datos de muestra si no hay API
        if not self.serpapi_key:
            return self._get_example_results(text_query, target_brand)
            
        # La l√≥gica real de b√∫squeda con SerpAPI ir√≠a aqu√≠
        return self._get_example_results(text_query, target_brand) # Placeholder

    def _get_example_results(self, query, brand):
        """Devuelve resultados de ejemplo para demostraci√≥n."""
        brand_name = (brand or "Ford").title()
        return [
            {'title': f'Filtro de Aceite para {brand_name}', 'price': '$15.50', 'is_oem': True, 'link': '#', 'source': 'OEM Parts', 'compatibility_note': ''},
            {'title': f'Pastillas de Freno para {brand_name}', 'price': '$45.00', 'is_oem': False, 'link': '#', 'source': 'RockAuto', 'compatibility_note': ''}
        ]

auto_parts_finder = AutoPartsFinder()

# ==============================================================================
# RUTAS DE LA APLICACI√ìN FLASK
# ==============================================================================

# --- Rutas de Autenticaci√≥n (sin cambios) ---
@app.route('/auth/login-page')
def auth_login_page():
    # Tu HTML de login aqu√≠
    return render_template_string("<h1>Login Page</h1><form method='post' action='/auth/login'><input name='email' placeholder='email'><input name='password' type='password'><button>Login</button></form>")

@app.route('/auth/login', methods=['POST'])
def auth_login():
    email = request.form.get('email', 'test@test.com') # Usar valores de prueba
    password = request.form.get('password', 'password')
    result = {'success': True, 'user_data': {'localId': '123', 'email': email, 'displayName': 'Test User', 'idToken': 'fake_token'}}
    firebase_auth.set_user_session(result['user_data'])
    return redirect(url_for('search_page'))

@app.route('/auth/logout')
def auth_logout():
    firebase_auth.clear_user_session()
    flash('Has cerrado la sesi√≥n correctamente.', 'success')
    return redirect(url_for('auth_login_page'))


# --- Rutas Principales de la Aplicaci√≥n ---
@app.route('/')
def index():
    if not firebase_auth.is_user_logged_in():
        return redirect(url_for('auth_login_page'))
    return redirect(url_for('search_page'))

@app.route('/search')
@login_required
def search_page():
    # ... tu HTML de la p√°gina de b√∫squeda ...
    return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head><title>Buscar Repuestos</title></head>
        <body>
            <h1>Buscar Repuestos de Auto (USA)</h1>
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin-bottom: 10px;">
                            <strong>Error:</strong> {{ message }}
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            <form action="{{ url_for('handle_search') }}" method="POST">
                <input type="text" name="query" placeholder="Ej: brake pads 2018 ford f-150" required style="width: 300px; padding: 5px;">
                <button type="submit">Buscar</button>
            </form>
        </body>
        </html>
    """)

@app.route('/handle_search', methods=['POST'])
@login_required
def handle_search():
    query = request.form.get('query')
    target_brand = request.form.get('target_brand')
    
    if not query:
        flash("Por favor, ingresa una pieza a buscar.", "danger")
        return redirect(url_for('search_page'))

    # Aqu√≠ ocurre la magia: llamamos al m√©todo que tiene el filtro
    products = auto_parts_finder.search_parts(query, target_brand)
    
    # Verificamos si la b√∫squeda fue rechazada
    if products == "INVALID_QUERY":
        flash("Sitio web exclusivamente para repuestos", "danger")
        return redirect(url_for('search_page'))

    # Si la b√∫squeda es v√°lida, guardamos y mostramos resultados
    session['last_results'] = products
    session['last_query'] = query
    return redirect(url_for('results_page'))

@app.route('/results')
@login_required
def results_page():
    results = session.get('last_results', [])
    query = session.get('last_query', 'B√∫squeda')
    # ... tu HTML de la p√°gina de resultados ...
    return render_template_string("""
        <h1>Resultados para: "{{ query }}"</h1>
        <a href="{{ url_for('search_page') }}">Nueva B√∫squeda</a>
        <hr>
        {% for product in results %}
            <div style="border: 1px solid black; padding: 10px; margin: 10px;">
                <h3>{{ product.title }}</h3>
                <p>Precio: {{ product.price }}</p>
                <p>Tienda: {{ product.source }}</p>
            </div>
        {% else %}
            <p>No se encontraron resultados.</p>
        {% endfor %}
    """, results=results, query=query)

# --- Punto de Entrada de la Aplicaci√≥n ---
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
